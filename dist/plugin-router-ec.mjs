import { createECDH, createHmac } from 'crypto';
import createPacketParser from 'msg-fabric-packet-stream';

function ec_router_plugin(plugin_options = {}) {
  return { subclass };

  function subclass(MessageHub_PI, bases) {
    Object.assign(MessageHub_PI.prototype, {
      _init_packetParser() {
        return createPacketParser();
      },
      _init_router() {
        return new ECMessageRouter();
      } });

    class ECMessageRouter extends bases.MessageRouter {
      constructor() {
        super();
        initRouterIdentity(this, plugin_options.ec_curve, plugin_options.ec_pem);
        this._initDispatch();
      }
    }
  }
}

ec_router_plugin.initRouterIdentity = initRouterIdentity;
function initRouterIdentity(router, curve, ec_pem) {
  // Create closures over the Router's EC private identity credentials
  var __ec_priv_id__, ec_pub_id, id_self;
  if (!curve) {
    curve = 'prime256v1';
  }
  while (!id_self) {
    // ensure id_self !== 0 by happenstance
    __ec_priv_id__ = Object.assign(createECDH(curve), { curve });
    ec_pub_id = __ec_priv_id__.generateKeys(null, 'compressed');
    id_self = ec_pub_id.readUInt32LE(8); // read id from offset 8 to 12
  }Object.defineProperties(router, {
    id_self: { value: id_self },
    ec_pub_id: { value: ec_pub_id },
    ec_id_hmac: { value: ec_id_hmac } });

  if (undefined === ec_pem) {
    const ec_pem_missing = { value() {
        throw new Error(`Requires optional [ec-pem][1] dependency.\n    [1]: https://www.npmjs.com/package/ec-pem`);
      } };

    Object.defineProperties(router, { ec_id_sign: ec_pem_missing, ec_id_verify: ec_pem_missing });
  } else {
    const ec_signed_id = ec_id_sign('sha256', ec_pub_id).sign();
    if (!ec_signed_id_verify(ec_pub_id, ec_signed_id)) {
      throw new Error(`Asserted self-verify of ec_pub_id failed`);
    }

    Object.defineProperties(router, {
      ec_signed_id: { value: ec_signed_id },
      ec_id_sign: { value: ec_id_sign },
      ec_id_verify: { value: ec_id_verify } });
  }

  function ec_id_hmac(ec_pub_other, reverse) {
    const secret = __ec_priv_id__.computeSecret(ec_pub_other);
    return createHmac('sha256', secret).update(reverse ? ec_pub_other : ec_pub_id).digest();
  }

  function ec_id_sign(algorithm, ...args) {
    return ec_pem.sign(__ec_priv_id__, algorithm, ...args);
  }

  function ec_signed_id_verify(ec_pub_other, ec_signed_other) {
    const verify = ec_id_verify(ec_pub_other, 'sha256', ec_pub_other);
    return ec_signed_other ? verify.verify(ec_signed_other) : verify;
  }

  function ec_id_verify(ec_pub_other, algorithm, ...args) {
    // see ec-pem.verfiy and crypto.createVerfiy
    let ec = ec_pub_other;
    if (null == ec_pub_other.curve) {
      ec = Object.assign(createECDH(curve), { curve });
      if (ec_pub_other.getPublicKey) {
        ec.setPublicKey(ec_pub_other.getPublicKey());
      } else ec.setPublicKey(ec_pub_other);
    }

    return ec_pem.verify(ec, algorithm, ...args);
  }
}

export default ec_router_plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLXJvdXRlci1lYy5tanMiLCJzb3VyY2VzIjpbIi4uL2NvZGUvZWNfcm91dGVyLmpzeSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZUVDREgsIGNyZWF0ZUhtYWN9IGZyb20gJ2NyeXB0bydcbmltcG9ydCBjcmVhdGVQYWNrZXRQYXJzZXIgZnJvbSAnbXNnLWZhYnJpYy1wYWNrZXQtc3RyZWFtJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlY19yb3V0ZXJfcGx1Z2luKHBsdWdpbl9vcHRpb25zPXt9KSA6OlxuICByZXR1cm4gQDogc3ViY2xhc3NcblxuICBmdW5jdGlvbiBzdWJjbGFzcyhNZXNzYWdlSHViX1BJLCBiYXNlcykgOjpcbiAgICBPYmplY3QuYXNzaWduIEAgTWVzc2FnZUh1Yl9QSS5wcm90b3R5cGUsIEA6XG4gICAgICBfaW5pdF9wYWNrZXRQYXJzZXIoKSA6OiByZXR1cm4gY3JlYXRlUGFja2V0UGFyc2VyKClcbiAgICAgIF9pbml0X3JvdXRlcigpIDo6IHJldHVybiBuZXcgRUNNZXNzYWdlUm91dGVyKClcblxuICAgIGNsYXNzIEVDTWVzc2FnZVJvdXRlciBleHRlbmRzIGJhc2VzLk1lc3NhZ2VSb3V0ZXIgOjpcbiAgICAgIGNvbnN0cnVjdG9yKCkgOjpcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBpbml0Um91dGVySWRlbnRpdHkodGhpcywgcGx1Z2luX29wdGlvbnMuZWNfY3VydmUsIHBsdWdpbl9vcHRpb25zLmVjX3BlbSlcbiAgICAgICAgdGhpcy5faW5pdERpc3BhdGNoKClcblxuXG5lY19yb3V0ZXJfcGx1Z2luLmluaXRSb3V0ZXJJZGVudGl0eSA9IGluaXRSb3V0ZXJJZGVudGl0eVxuZnVuY3Rpb24gaW5pdFJvdXRlcklkZW50aXR5KHJvdXRlciwgY3VydmUsIGVjX3BlbSkgOjpcbiAgLy8gQ3JlYXRlIGNsb3N1cmVzIG92ZXIgdGhlIFJvdXRlcidzIEVDIHByaXZhdGUgaWRlbnRpdHkgY3JlZGVudGlhbHNcbiAgdmFyIF9fZWNfcHJpdl9pZF9fLCBlY19wdWJfaWQsIGlkX3NlbGZcbiAgaWYgISBjdXJ2ZSA6OiBjdXJ2ZSA9ICdwcmltZTI1NnYxJ1xuICB3aGlsZSAhIGlkX3NlbGYgOjogLy8gZW5zdXJlIGlkX3NlbGYgIT09IDAgYnkgaGFwcGVuc3RhbmNlXG4gICAgX19lY19wcml2X2lkX18gPSBPYmplY3QuYXNzaWduIEAgY3JlYXRlRUNESChjdXJ2ZSksIEB7fSBjdXJ2ZVxuICAgIGVjX3B1Yl9pZCA9IF9fZWNfcHJpdl9pZF9fLmdlbmVyYXRlS2V5cyhudWxsLCAnY29tcHJlc3NlZCcpXG4gICAgaWRfc2VsZiA9IGVjX3B1Yl9pZC5yZWFkVUludDMyTEUoOCkgLy8gcmVhZCBpZCBmcm9tIG9mZnNldCA4IHRvIDEyXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgQCByb3V0ZXIsIEA6XG4gICAgaWRfc2VsZjogQDogdmFsdWU6IGlkX3NlbGZcbiAgICBlY19wdWJfaWQ6IEA6IHZhbHVlOiBlY19wdWJfaWRcbiAgICBlY19pZF9obWFjOiBAOiB2YWx1ZTogZWNfaWRfaG1hY1xuXG5cbiAgaWYgdW5kZWZpbmVkID09PSBlY19wZW0gOjpcbiAgICBjb25zdCBlY19wZW1fbWlzc2luZyA9IEA6IHZhbHVlKCkgOjpcbiAgICAgIHRocm93IG5ldyBFcnJvciBAIGBSZXF1aXJlcyBvcHRpb25hbCBbZWMtcGVtXVsxXSBkZXBlbmRlbmN5LlxcbiAgICBbMV06IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2VjLXBlbWBcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIEAgcm91dGVyLCBAOiBlY19pZF9zaWduOiBlY19wZW1fbWlzc2luZywgZWNfaWRfdmVyaWZ5OiBlY19wZW1fbWlzc2luZ1xuXG4gIGVsc2UgOjpcbiAgICBjb25zdCBlY19zaWduZWRfaWQgPSBlY19pZF9zaWduKCdzaGEyNTYnLCBlY19wdWJfaWQpLnNpZ24oKVxuICAgIGlmICEgZWNfc2lnbmVkX2lkX3ZlcmlmeShlY19wdWJfaWQsIGVjX3NpZ25lZF9pZCkgOjpcbiAgICAgIHRocm93IG5ldyBFcnJvciBAIGBBc3NlcnRlZCBzZWxmLXZlcmlmeSBvZiBlY19wdWJfaWQgZmFpbGVkYFxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgQCByb3V0ZXIsIEA6XG4gICAgICBlY19zaWduZWRfaWQ6IEA6IHZhbHVlOiBlY19zaWduZWRfaWRcbiAgICAgIGVjX2lkX3NpZ246IEA6IHZhbHVlOiBlY19pZF9zaWduXG4gICAgICBlY19pZF92ZXJpZnk6IEA6IHZhbHVlOiBlY19pZF92ZXJpZnlcblxuXG5cbiAgZnVuY3Rpb24gZWNfaWRfaG1hYyhlY19wdWJfb3RoZXIsIHJldmVyc2UpIDo6XG4gICAgY29uc3Qgc2VjcmV0ID0gX19lY19wcml2X2lkX18uY29tcHV0ZVNlY3JldChlY19wdWJfb3RoZXIpXG4gICAgcmV0dXJuIGNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldClcbiAgICAgIC51cGRhdGUgQCByZXZlcnNlID8gZWNfcHViX290aGVyIDogZWNfcHViX2lkXG4gICAgICAuZGlnZXN0KClcblxuICBmdW5jdGlvbiBlY19pZF9zaWduKGFsZ29yaXRobSwgLi4uYXJncykgOjpcbiAgICByZXR1cm4gZWNfcGVtLnNpZ24oX19lY19wcml2X2lkX18sIGFsZ29yaXRobSwgLi4uYXJncylcblxuICBmdW5jdGlvbiBlY19zaWduZWRfaWRfdmVyaWZ5KGVjX3B1Yl9vdGhlciwgZWNfc2lnbmVkX290aGVyKSA6OlxuICAgIGNvbnN0IHZlcmlmeSA9IGVjX2lkX3ZlcmlmeShlY19wdWJfb3RoZXIsICdzaGEyNTYnLCBlY19wdWJfb3RoZXIpXG4gICAgcmV0dXJuIGVjX3NpZ25lZF9vdGhlciA/IHZlcmlmeS52ZXJpZnkoZWNfc2lnbmVkX290aGVyKSA6IHZlcmlmeVxuXG4gIGZ1bmN0aW9uIGVjX2lkX3ZlcmlmeShlY19wdWJfb3RoZXIsIGFsZ29yaXRobSwgLi4uYXJncykgOjpcbiAgICAvLyBzZWUgZWMtcGVtLnZlcmZpeSBhbmQgY3J5cHRvLmNyZWF0ZVZlcmZpeVxuICAgIGxldCBlYyA9IGVjX3B1Yl9vdGhlclxuICAgIGlmIG51bGwgPT0gZWNfcHViX290aGVyLmN1cnZlIDo6XG4gICAgICBlYyA9IE9iamVjdC5hc3NpZ24gQCBjcmVhdGVFQ0RIKGN1cnZlKSwgQHt9IGN1cnZlXG4gICAgICBpZiBlY19wdWJfb3RoZXIuZ2V0UHVibGljS2V5IDo6XG4gICAgICAgIGVjLnNldFB1YmxpY0tleSBAIGVjX3B1Yl9vdGhlci5nZXRQdWJsaWNLZXkoKVxuICAgICAgZWxzZSBlYy5zZXRQdWJsaWNLZXkgQCBlY19wdWJfb3RoZXJcblxuICAgIHJldHVybiBlY19wZW0udmVyaWZ5KGVjLCBhbGdvcml0aG0sIC4uLmFyZ3MpXG5cbiJdLCJuYW1lcyI6WyJlY19yb3V0ZXJfcGx1Z2luIiwicGx1Z2luX29wdGlvbnMiLCJzdWJjbGFzcyIsIk1lc3NhZ2VIdWJfUEkiLCJiYXNlcyIsImFzc2lnbiIsInByb3RvdHlwZSIsImNyZWF0ZVBhY2tldFBhcnNlciIsIkVDTWVzc2FnZVJvdXRlciIsIk1lc3NhZ2VSb3V0ZXIiLCJlY19jdXJ2ZSIsImVjX3BlbSIsIl9pbml0RGlzcGF0Y2giLCJpbml0Um91dGVySWRlbnRpdHkiLCJyb3V0ZXIiLCJjdXJ2ZSIsIl9fZWNfcHJpdl9pZF9fIiwiZWNfcHViX2lkIiwiaWRfc2VsZiIsIk9iamVjdCIsImNyZWF0ZUVDREgiLCJnZW5lcmF0ZUtleXMiLCJyZWFkVUludDMyTEUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidmFsdWUiLCJlY19pZF9obWFjIiwidW5kZWZpbmVkIiwiZWNfcGVtX21pc3NpbmciLCJFcnJvciIsImVjX2lkX3NpZ24iLCJlY19pZF92ZXJpZnkiLCJlY19zaWduZWRfaWQiLCJzaWduIiwiZWNfc2lnbmVkX2lkX3ZlcmlmeSIsImVjX3B1Yl9vdGhlciIsInJldmVyc2UiLCJzZWNyZXQiLCJjb21wdXRlU2VjcmV0IiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsImFsZ29yaXRobSIsImFyZ3MiLCJlY19zaWduZWRfb3RoZXIiLCJ2ZXJpZnkiLCJlYyIsImdldFB1YmxpY0tleSIsInNldFB1YmxpY0tleSJdLCJtYXBwaW5ncyI6Ijs7O0FBR2UsU0FBU0EsZ0JBQVQsQ0FBMEJDLGlCQUFlLEVBQXpDLEVBQTZDO1NBQ2pELEVBQUNDLFFBQUQsRUFBVDs7V0FFU0EsUUFBVCxDQUFrQkMsYUFBbEIsRUFBaUNDLEtBQWpDLEVBQXdDO1dBQy9CQyxNQUFQLENBQWdCRixjQUFjRyxTQUE5QixFQUEyQzsyQkFDcEI7ZUFBVUMsb0JBQVA7T0FEaUI7cUJBRTFCO2VBQVUsSUFBSUMsZUFBSixFQUFQO09BRnVCLEVBQTNDOztVQUlNQSxlQUFOLFNBQThCSixNQUFNSyxhQUFwQyxDQUFrRDtvQkFDbEM7OzJCQUVPLElBQW5CLEVBQXlCUixlQUFlUyxRQUF4QyxFQUFrRFQsZUFBZVUsTUFBakU7YUFDS0MsYUFBTDs7Ozs7O0FBR1JaLGlCQUFpQmEsa0JBQWpCLEdBQXNDQSxrQkFBdEM7QUFDQSxTQUFTQSxrQkFBVCxDQUE0QkMsTUFBNUIsRUFBb0NDLEtBQXBDLEVBQTJDSixNQUEzQyxFQUFtRDs7TUFFN0NLLGNBQUosRUFBb0JDLFNBQXBCLEVBQStCQyxPQUEvQjtNQUNHLENBQUVILEtBQUwsRUFBYTtZQUFTLFlBQVI7O1NBQ1IsQ0FBRUcsT0FBUixFQUFrQjs7cUJBQ0NDLE9BQU9kLE1BQVAsQ0FBZ0JlLFdBQVdMLEtBQVgsQ0FBaEIsRUFBbUMsRUFBSUEsS0FBSixFQUFuQyxDQUFqQjtnQkFDWUMsZUFBZUssWUFBZixDQUE0QixJQUE1QixFQUFrQyxZQUFsQyxDQUFaO2NBQ1VKLFVBQVVLLFlBQVYsQ0FBdUIsQ0FBdkIsQ0FBVixDQUhnQjtHQUtsQkgsT0FBT0ksZ0JBQVAsQ0FBMEJULE1BQTFCLEVBQW9DO2FBQ3ZCLEVBQUNVLE9BQU9OLE9BQVIsRUFEdUI7ZUFFckIsRUFBQ00sT0FBT1AsU0FBUixFQUZxQjtnQkFHcEIsRUFBQ08sT0FBT0MsVUFBUixFQUhvQixFQUFwQzs7TUFNR0MsY0FBY2YsTUFBakIsRUFBMEI7VUFDbEJnQixpQkFBbUIsRUFBQ0gsUUFBUTtjQUMxQixJQUFJSSxLQUFKLENBQWEsMEZBQWIsQ0FBTjtPQUR1QixFQUF6Qjs7V0FHT0wsZ0JBQVAsQ0FBMEJULE1BQTFCLEVBQW9DLEVBQUNlLFlBQVlGLGNBQWIsRUFBNkJHLGNBQWNILGNBQTNDLEVBQXBDO0dBSkYsTUFNSztVQUNHSSxlQUFlRixXQUFXLFFBQVgsRUFBcUJaLFNBQXJCLEVBQWdDZSxJQUFoQyxFQUFyQjtRQUNHLENBQUVDLG9CQUFvQmhCLFNBQXBCLEVBQStCYyxZQUEvQixDQUFMLEVBQW9EO1lBQzVDLElBQUlILEtBQUosQ0FBYSwwQ0FBYixDQUFOOzs7V0FFS0wsZ0JBQVAsQ0FBMEJULE1BQTFCLEVBQW9DO29CQUNsQixFQUFDVSxPQUFPTyxZQUFSLEVBRGtCO2tCQUVwQixFQUFDUCxPQUFPSyxVQUFSLEVBRm9CO29CQUdsQixFQUFDTCxPQUFPTSxZQUFSLEVBSGtCLEVBQXBDOzs7V0FPT0wsVUFBVCxDQUFvQlMsWUFBcEIsRUFBa0NDLE9BQWxDLEVBQTJDO1VBQ25DQyxTQUFTcEIsZUFBZXFCLGFBQWYsQ0FBNkJILFlBQTdCLENBQWY7V0FDT0ksV0FBVyxRQUFYLEVBQXFCRixNQUFyQixFQUNKRyxNQURJLENBQ0tKLFVBQVVELFlBQVYsR0FBeUJqQixTQUQ5QixFQUVKdUIsTUFGSSxFQUFQOzs7V0FJT1gsVUFBVCxDQUFvQlksU0FBcEIsRUFBK0IsR0FBR0MsSUFBbEMsRUFBd0M7V0FDL0IvQixPQUFPcUIsSUFBUCxDQUFZaEIsY0FBWixFQUE0QnlCLFNBQTVCLEVBQXVDLEdBQUdDLElBQTFDLENBQVA7OztXQUVPVCxtQkFBVCxDQUE2QkMsWUFBN0IsRUFBMkNTLGVBQTNDLEVBQTREO1VBQ3BEQyxTQUFTZCxhQUFhSSxZQUFiLEVBQTJCLFFBQTNCLEVBQXFDQSxZQUFyQyxDQUFmO1dBQ09TLGtCQUFrQkMsT0FBT0EsTUFBUCxDQUFjRCxlQUFkLENBQWxCLEdBQW1EQyxNQUExRDs7O1dBRU9kLFlBQVQsQ0FBc0JJLFlBQXRCLEVBQW9DTyxTQUFwQyxFQUErQyxHQUFHQyxJQUFsRCxFQUF3RDs7UUFFbERHLEtBQUtYLFlBQVQ7UUFDRyxRQUFRQSxhQUFhbkIsS0FBeEIsRUFBZ0M7V0FDekJJLE9BQU9kLE1BQVAsQ0FBZ0JlLFdBQVdMLEtBQVgsQ0FBaEIsRUFBbUMsRUFBSUEsS0FBSixFQUFuQyxDQUFMO1VBQ0dtQixhQUFhWSxZQUFoQixFQUErQjtXQUMxQkMsWUFBSCxDQUFrQmIsYUFBYVksWUFBYixFQUFsQjtPQURGLE1BRUtELEdBQUdFLFlBQUgsQ0FBa0JiLFlBQWxCOzs7V0FFQXZCLE9BQU9pQyxNQUFQLENBQWNDLEVBQWQsRUFBa0JKLFNBQWxCLEVBQTZCLEdBQUdDLElBQWhDLENBQVA7Ozs7OzsifQ==
