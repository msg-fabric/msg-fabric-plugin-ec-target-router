'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var url = require('url');
var crypto = require('crypto');
var createPacketParser = _interopDefault(require('msg-fabric-packet-stream'));

function ec_router_plugin(plugin_options = {}) {
  return { subclass };

  function subclass(FabricHub_PI, bases) {
    Object.assign(FabricHub_PI.prototype, {
      packetParser: createPacketParser(plugin_options),
      _parseConnectURL(conn_url) {
        return new url.URL(conn_url);
      },
      _init_router() {
        return new ECRouter();
      } });

    class ECRouter extends bases.Router {
      constructor() {
        super();
        initRouterIdentity(this, plugin_options.ec_curve, plugin_options.ec_pem);
        this._initDispatch();
      }
    }
  }
}

ec_router_plugin.initRouterIdentity = initRouterIdentity;
function initRouterIdentity(router, curve, ec_pem) {
  // Create closures over the Router's EC private identity credentials
  var __ec_priv_id__, ec_pub_id, id_self;
  if (!curve) {
    curve = 'prime256v1';
  }
  while (!id_self) {
    // ensure id_self !== 0 by happenstance
    __ec_priv_id__ = Object.assign(crypto.createECDH(curve), { curve });
    ec_pub_id = __ec_priv_id__.generateKeys(null, 'compressed');
    id_self = ec_pub_id.readUInt32LE(8); // read id from offset 8 to 12
  }Object.defineProperties(router, {
    id_self: { value: id_self },
    ec_pub_id: { value: ec_pub_id },
    ec_id_hmac: { value: ec_id_hmac } });

  if (undefined === ec_pem) {
    const ec_pem_missing = { value() {
        throw new Error(`Requires optional [ec-pem][1] dependency.\n    [1]: https://www.npmjs.com/package/ec-pem`);
      } };

    Object.defineProperties(router, { ec_id_sign: ec_pem_missing, ec_id_verify: ec_pem_missing });
  } else {
    const ec_signed_id = ec_id_sign('sha256', ec_pub_id).sign();
    if (!ec_signed_id_verify(ec_pub_id, ec_signed_id)) {
      throw new Error(`Asserted self-verify of ec_pub_id failed`);
    }

    Object.defineProperties(router, {
      ec_signed_id: { value: ec_signed_id },
      ec_id_sign: { value: ec_id_sign },
      ec_id_verify: { value: ec_id_verify } });
  }

  function ec_id_hmac(ec_pub_other, reverse) {
    const secret = __ec_priv_id__.computeSecret(ec_pub_other);
    return crypto.createHmac('sha256', secret).update(reverse ? ec_pub_other : ec_pub_id).digest();
  }

  function ec_id_sign(algorithm, ...args) {
    return ec_pem.sign(__ec_priv_id__, algorithm, ...args);
  }

  function ec_signed_id_verify(ec_pub_other, ec_signed_other) {
    const verify = ec_id_verify(ec_pub_other, 'sha256', ec_pub_other);
    return ec_signed_other ? verify.verify(ec_signed_other) : verify;
  }

  function ec_id_verify(ec_pub_other, algorithm, ...args) {
    // see ec-pem.verfiy and crypto.createVerfiy
    let ec = ec_pub_other;
    if (null == ec_pub_other.curve) {
      ec = Object.assign(crypto.createECDH(curve), { curve });
      if (ec_pub_other.getPublicKey) {
        ec.setPublicKey(ec_pub_other.getPublicKey());
      } else ec.setPublicKey(ec_pub_other);
    }

    return ec_pem.verify(ec, algorithm, ...args);
  }
}

module.exports = ec_router_plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLXJvdXRlci1lYy5qcyIsInNvdXJjZXMiOlsiLi4vY29kZS9lY19yb3V0ZXIuanN5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VVJMfSBmcm9tICd1cmwnXG5pbXBvcnQge2NyZWF0ZUVDREgsIGNyZWF0ZUhtYWN9IGZyb20gJ2NyeXB0bydcbmltcG9ydCBjcmVhdGVQYWNrZXRQYXJzZXIgZnJvbSAnbXNnLWZhYnJpYy1wYWNrZXQtc3RyZWFtJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlY19yb3V0ZXJfcGx1Z2luKHBsdWdpbl9vcHRpb25zPXt9KSA6OlxuICByZXR1cm4gQDogc3ViY2xhc3NcblxuICBmdW5jdGlvbiBzdWJjbGFzcyhGYWJyaWNIdWJfUEksIGJhc2VzKSA6OlxuICAgIE9iamVjdC5hc3NpZ24gQCBGYWJyaWNIdWJfUEkucHJvdG90eXBlLCBAOlxuICAgICAgcGFja2V0UGFyc2VyOiBjcmVhdGVQYWNrZXRQYXJzZXIgQCBwbHVnaW5fb3B0aW9uc1xuICAgICAgX3BhcnNlQ29ubmVjdFVSTChjb25uX3VybCkgOjogcmV0dXJuIG5ldyBVUkwoY29ubl91cmwpXG4gICAgICBfaW5pdF9yb3V0ZXIoKSA6OiByZXR1cm4gbmV3IEVDUm91dGVyKClcblxuICAgIGNsYXNzIEVDUm91dGVyIGV4dGVuZHMgYmFzZXMuUm91dGVyIDo6XG4gICAgICBjb25zdHJ1Y3RvcigpIDo6XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgaW5pdFJvdXRlcklkZW50aXR5KHRoaXMsIHBsdWdpbl9vcHRpb25zLmVjX2N1cnZlLCBwbHVnaW5fb3B0aW9ucy5lY19wZW0pXG4gICAgICAgIHRoaXMuX2luaXREaXNwYXRjaCgpXG5cblxuZWNfcm91dGVyX3BsdWdpbi5pbml0Um91dGVySWRlbnRpdHkgPSBpbml0Um91dGVySWRlbnRpdHlcbmZ1bmN0aW9uIGluaXRSb3V0ZXJJZGVudGl0eShyb3V0ZXIsIGN1cnZlLCBlY19wZW0pIDo6XG4gIC8vIENyZWF0ZSBjbG9zdXJlcyBvdmVyIHRoZSBSb3V0ZXIncyBFQyBwcml2YXRlIGlkZW50aXR5IGNyZWRlbnRpYWxzXG4gIHZhciBfX2VjX3ByaXZfaWRfXywgZWNfcHViX2lkLCBpZF9zZWxmXG4gIGlmICEgY3VydmUgOjogY3VydmUgPSAncHJpbWUyNTZ2MSdcbiAgd2hpbGUgISBpZF9zZWxmIDo6IC8vIGVuc3VyZSBpZF9zZWxmICE9PSAwIGJ5IGhhcHBlbnN0YW5jZVxuICAgIF9fZWNfcHJpdl9pZF9fID0gT2JqZWN0LmFzc2lnbiBAIGNyZWF0ZUVDREgoY3VydmUpLCBAe30gY3VydmVcbiAgICBlY19wdWJfaWQgPSBfX2VjX3ByaXZfaWRfXy5nZW5lcmF0ZUtleXMobnVsbCwgJ2NvbXByZXNzZWQnKVxuICAgIGlkX3NlbGYgPSBlY19wdWJfaWQucmVhZFVJbnQzMkxFKDgpIC8vIHJlYWQgaWQgZnJvbSBvZmZzZXQgOCB0byAxMlxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIEAgcm91dGVyLCBAOlxuICAgIGlkX3NlbGY6IEA6IHZhbHVlOiBpZF9zZWxmXG4gICAgZWNfcHViX2lkOiBAOiB2YWx1ZTogZWNfcHViX2lkXG4gICAgZWNfaWRfaG1hYzogQDogdmFsdWU6IGVjX2lkX2htYWNcblxuXG4gIGlmIHVuZGVmaW5lZCA9PT0gZWNfcGVtIDo6XG4gICAgY29uc3QgZWNfcGVtX21pc3NpbmcgPSBAOiB2YWx1ZSgpIDo6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IgQCBgUmVxdWlyZXMgb3B0aW9uYWwgW2VjLXBlbV1bMV0gZGVwZW5kZW5jeS5cXG4gICAgWzFdOiBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9lYy1wZW1gXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyBAIHJvdXRlciwgQDogZWNfaWRfc2lnbjogZWNfcGVtX21pc3NpbmcsIGVjX2lkX3ZlcmlmeTogZWNfcGVtX21pc3NpbmdcblxuICBlbHNlIDo6XG4gICAgY29uc3QgZWNfc2lnbmVkX2lkID0gZWNfaWRfc2lnbignc2hhMjU2JywgZWNfcHViX2lkKS5zaWduKClcbiAgICBpZiAhIGVjX3NpZ25lZF9pZF92ZXJpZnkoZWNfcHViX2lkLCBlY19zaWduZWRfaWQpIDo6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IgQCBgQXNzZXJ0ZWQgc2VsZi12ZXJpZnkgb2YgZWNfcHViX2lkIGZhaWxlZGBcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIEAgcm91dGVyLCBAOlxuICAgICAgZWNfc2lnbmVkX2lkOiBAOiB2YWx1ZTogZWNfc2lnbmVkX2lkXG4gICAgICBlY19pZF9zaWduOiBAOiB2YWx1ZTogZWNfaWRfc2lnblxuICAgICAgZWNfaWRfdmVyaWZ5OiBAOiB2YWx1ZTogZWNfaWRfdmVyaWZ5XG5cblxuXG4gIGZ1bmN0aW9uIGVjX2lkX2htYWMoZWNfcHViX290aGVyLCByZXZlcnNlKSA6OlxuICAgIGNvbnN0IHNlY3JldCA9IF9fZWNfcHJpdl9pZF9fLmNvbXB1dGVTZWNyZXQoZWNfcHViX290aGVyKVxuICAgIHJldHVybiBjcmVhdGVIbWFjKCdzaGEyNTYnLCBzZWNyZXQpXG4gICAgICAudXBkYXRlIEAgcmV2ZXJzZSA/IGVjX3B1Yl9vdGhlciA6IGVjX3B1Yl9pZFxuICAgICAgLmRpZ2VzdCgpXG5cbiAgZnVuY3Rpb24gZWNfaWRfc2lnbihhbGdvcml0aG0sIC4uLmFyZ3MpIDo6XG4gICAgcmV0dXJuIGVjX3BlbS5zaWduKF9fZWNfcHJpdl9pZF9fLCBhbGdvcml0aG0sIC4uLmFyZ3MpXG5cbiAgZnVuY3Rpb24gZWNfc2lnbmVkX2lkX3ZlcmlmeShlY19wdWJfb3RoZXIsIGVjX3NpZ25lZF9vdGhlcikgOjpcbiAgICBjb25zdCB2ZXJpZnkgPSBlY19pZF92ZXJpZnkoZWNfcHViX290aGVyLCAnc2hhMjU2JywgZWNfcHViX290aGVyKVxuICAgIHJldHVybiBlY19zaWduZWRfb3RoZXIgPyB2ZXJpZnkudmVyaWZ5KGVjX3NpZ25lZF9vdGhlcikgOiB2ZXJpZnlcblxuICBmdW5jdGlvbiBlY19pZF92ZXJpZnkoZWNfcHViX290aGVyLCBhbGdvcml0aG0sIC4uLmFyZ3MpIDo6XG4gICAgLy8gc2VlIGVjLXBlbS52ZXJmaXkgYW5kIGNyeXB0by5jcmVhdGVWZXJmaXlcbiAgICBsZXQgZWMgPSBlY19wdWJfb3RoZXJcbiAgICBpZiBudWxsID09IGVjX3B1Yl9vdGhlci5jdXJ2ZSA6OlxuICAgICAgZWMgPSBPYmplY3QuYXNzaWduIEAgY3JlYXRlRUNESChjdXJ2ZSksIEB7fSBjdXJ2ZVxuICAgICAgaWYgZWNfcHViX290aGVyLmdldFB1YmxpY0tleSA6OlxuICAgICAgICBlYy5zZXRQdWJsaWNLZXkgQCBlY19wdWJfb3RoZXIuZ2V0UHVibGljS2V5KClcbiAgICAgIGVsc2UgZWMuc2V0UHVibGljS2V5IEAgZWNfcHViX290aGVyXG5cbiAgICByZXR1cm4gZWNfcGVtLnZlcmlmeShlYywgYWxnb3JpdGhtLCAuLi5hcmdzKVxuXG4iXSwibmFtZXMiOlsiZWNfcm91dGVyX3BsdWdpbiIsInBsdWdpbl9vcHRpb25zIiwic3ViY2xhc3MiLCJGYWJyaWNIdWJfUEkiLCJiYXNlcyIsImFzc2lnbiIsInByb3RvdHlwZSIsImNyZWF0ZVBhY2tldFBhcnNlciIsImNvbm5fdXJsIiwiVVJMIiwiRUNSb3V0ZXIiLCJSb3V0ZXIiLCJlY19jdXJ2ZSIsImVjX3BlbSIsIl9pbml0RGlzcGF0Y2giLCJpbml0Um91dGVySWRlbnRpdHkiLCJyb3V0ZXIiLCJjdXJ2ZSIsIl9fZWNfcHJpdl9pZF9fIiwiZWNfcHViX2lkIiwiaWRfc2VsZiIsIk9iamVjdCIsImNyZWF0ZUVDREgiLCJnZW5lcmF0ZUtleXMiLCJyZWFkVUludDMyTEUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidmFsdWUiLCJlY19pZF9obWFjIiwidW5kZWZpbmVkIiwiZWNfcGVtX21pc3NpbmciLCJFcnJvciIsImVjX2lkX3NpZ24iLCJlY19pZF92ZXJpZnkiLCJlY19zaWduZWRfaWQiLCJzaWduIiwiZWNfc2lnbmVkX2lkX3ZlcmlmeSIsImVjX3B1Yl9vdGhlciIsInJldmVyc2UiLCJzZWNyZXQiLCJjb21wdXRlU2VjcmV0IiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsImFsZ29yaXRobSIsImFyZ3MiLCJlY19zaWduZWRfb3RoZXIiLCJ2ZXJpZnkiLCJlYyIsImdldFB1YmxpY0tleSIsInNldFB1YmxpY0tleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFJZSxTQUFTQSxnQkFBVCxDQUEwQkMsaUJBQWUsRUFBekMsRUFBNkM7U0FDakQsRUFBQ0MsUUFBRCxFQUFUOztXQUVTQSxRQUFULENBQWtCQyxZQUFsQixFQUFnQ0MsS0FBaEMsRUFBdUM7V0FDOUJDLE1BQVAsQ0FBZ0JGLGFBQWFHLFNBQTdCLEVBQTBDO29CQUMxQkMsbUJBQXFCTixjQUFyQixDQUQwQjt1QkFFdkJPLFFBQWpCLEVBQTJCO2VBQVUsSUFBSUMsT0FBSixDQUFRRCxRQUFSLENBQVA7T0FGVTtxQkFHekI7ZUFBVSxJQUFJRSxRQUFKLEVBQVA7T0FIc0IsRUFBMUM7O1VBS01BLFFBQU4sU0FBdUJOLE1BQU1PLE1BQTdCLENBQW9DO29CQUNwQjs7MkJBRU8sSUFBbkIsRUFBeUJWLGVBQWVXLFFBQXhDLEVBQWtEWCxlQUFlWSxNQUFqRTthQUNLQyxhQUFMOzs7Ozs7QUFHUmQsaUJBQWlCZSxrQkFBakIsR0FBc0NBLGtCQUF0QztBQUNBLFNBQVNBLGtCQUFULENBQTRCQyxNQUE1QixFQUFvQ0MsS0FBcEMsRUFBMkNKLE1BQTNDLEVBQW1EOztNQUU3Q0ssY0FBSixFQUFvQkMsU0FBcEIsRUFBK0JDLE9BQS9CO01BQ0csQ0FBRUgsS0FBTCxFQUFhO1lBQVMsWUFBUjs7U0FDUixDQUFFRyxPQUFSLEVBQWtCOztxQkFDQ0MsT0FBT2hCLE1BQVAsQ0FBZ0JpQixrQkFBV0wsS0FBWCxDQUFoQixFQUFtQyxFQUFJQSxLQUFKLEVBQW5DLENBQWpCO2dCQUNZQyxlQUFlSyxZQUFmLENBQTRCLElBQTVCLEVBQWtDLFlBQWxDLENBQVo7Y0FDVUosVUFBVUssWUFBVixDQUF1QixDQUF2QixDQUFWLENBSGdCO0dBS2xCSCxPQUFPSSxnQkFBUCxDQUEwQlQsTUFBMUIsRUFBb0M7YUFDdkIsRUFBQ1UsT0FBT04sT0FBUixFQUR1QjtlQUVyQixFQUFDTSxPQUFPUCxTQUFSLEVBRnFCO2dCQUdwQixFQUFDTyxPQUFPQyxVQUFSLEVBSG9CLEVBQXBDOztNQU1HQyxjQUFjZixNQUFqQixFQUEwQjtVQUNsQmdCLGlCQUFtQixFQUFDSCxRQUFRO2NBQzFCLElBQUlJLEtBQUosQ0FBYSwwRkFBYixDQUFOO09BRHVCLEVBQXpCOztXQUdPTCxnQkFBUCxDQUEwQlQsTUFBMUIsRUFBb0MsRUFBQ2UsWUFBWUYsY0FBYixFQUE2QkcsY0FBY0gsY0FBM0MsRUFBcEM7R0FKRixNQU1LO1VBQ0dJLGVBQWVGLFdBQVcsUUFBWCxFQUFxQlosU0FBckIsRUFBZ0NlLElBQWhDLEVBQXJCO1FBQ0csQ0FBRUMsb0JBQW9CaEIsU0FBcEIsRUFBK0JjLFlBQS9CLENBQUwsRUFBb0Q7WUFDNUMsSUFBSUgsS0FBSixDQUFhLDBDQUFiLENBQU47OztXQUVLTCxnQkFBUCxDQUEwQlQsTUFBMUIsRUFBb0M7b0JBQ2xCLEVBQUNVLE9BQU9PLFlBQVIsRUFEa0I7a0JBRXBCLEVBQUNQLE9BQU9LLFVBQVIsRUFGb0I7b0JBR2xCLEVBQUNMLE9BQU9NLFlBQVIsRUFIa0IsRUFBcEM7OztXQU9PTCxVQUFULENBQW9CUyxZQUFwQixFQUFrQ0MsT0FBbEMsRUFBMkM7VUFDbkNDLFNBQVNwQixlQUFlcUIsYUFBZixDQUE2QkgsWUFBN0IsQ0FBZjtXQUNPSSxrQkFBVyxRQUFYLEVBQXFCRixNQUFyQixFQUNKRyxNQURJLENBQ0tKLFVBQVVELFlBQVYsR0FBeUJqQixTQUQ5QixFQUVKdUIsTUFGSSxFQUFQOzs7V0FJT1gsVUFBVCxDQUFvQlksU0FBcEIsRUFBK0IsR0FBR0MsSUFBbEMsRUFBd0M7V0FDL0IvQixPQUFPcUIsSUFBUCxDQUFZaEIsY0FBWixFQUE0QnlCLFNBQTVCLEVBQXVDLEdBQUdDLElBQTFDLENBQVA7OztXQUVPVCxtQkFBVCxDQUE2QkMsWUFBN0IsRUFBMkNTLGVBQTNDLEVBQTREO1VBQ3BEQyxTQUFTZCxhQUFhSSxZQUFiLEVBQTJCLFFBQTNCLEVBQXFDQSxZQUFyQyxDQUFmO1dBQ09TLGtCQUFrQkMsT0FBT0EsTUFBUCxDQUFjRCxlQUFkLENBQWxCLEdBQW1EQyxNQUExRDs7O1dBRU9kLFlBQVQsQ0FBc0JJLFlBQXRCLEVBQW9DTyxTQUFwQyxFQUErQyxHQUFHQyxJQUFsRCxFQUF3RDs7UUFFbERHLEtBQUtYLFlBQVQ7UUFDRyxRQUFRQSxhQUFhbkIsS0FBeEIsRUFBZ0M7V0FDekJJLE9BQU9oQixNQUFQLENBQWdCaUIsa0JBQVdMLEtBQVgsQ0FBaEIsRUFBbUMsRUFBSUEsS0FBSixFQUFuQyxDQUFMO1VBQ0dtQixhQUFhWSxZQUFoQixFQUErQjtXQUMxQkMsWUFBSCxDQUFrQmIsYUFBYVksWUFBYixFQUFsQjtPQURGLE1BRUtELEdBQUdFLFlBQUgsQ0FBa0JiLFlBQWxCOzs7V0FFQXZCLE9BQU9pQyxNQUFQLENBQWNDLEVBQWQsRUFBa0JKLFNBQWxCLEVBQTZCLEdBQUdDLElBQWhDLENBQVA7Ozs7OzsifQ==
