import { URL } from 'url';
import { createECDH, createHmac } from 'crypto';
import createPacketParser from 'msg-fabric-packet-stream';

function ec_router_plugin(plugin_options = {}) {
  return { subclass };

  function subclass(MessageHub_PI, bases) {
    Object.assign(MessageHub_PI.prototype, {
      _init_packetParser() {
        return createPacketParser();
      },
      _parseConnectURL(conn_url) {
        return new URL(conn_url);
      },
      _init_router() {
        return new ECMessageRouter();
      } });

    class ECMessageRouter extends bases.MessageRouter {
      constructor() {
        super();
        initRouterIdentity(this, plugin_options.ec_curve, plugin_options.ec_pem);
        this._initDispatch();
      }
    }
  }
}

ec_router_plugin.initRouterIdentity = initRouterIdentity;
function initRouterIdentity(router, curve, ec_pem) {
  // Create closures over the Router's EC private identity credentials
  var __ec_priv_id__, ec_pub_id, id_self;
  if (!curve) {
    curve = 'prime256v1';
  }
  while (!id_self) {
    // ensure id_self !== 0 by happenstance
    __ec_priv_id__ = Object.assign(createECDH(curve), { curve });
    ec_pub_id = __ec_priv_id__.generateKeys(null, 'compressed');
    id_self = ec_pub_id.readUInt32LE(8); // read id from offset 8 to 12
  }Object.defineProperties(router, {
    id_self: { value: id_self },
    ec_pub_id: { value: ec_pub_id },
    ec_id_hmac: { value: ec_id_hmac } });

  if (undefined === ec_pem) {
    const ec_pem_missing = { value() {
        throw new Error(`Requires optional [ec-pem][1] dependency.\n    [1]: https://www.npmjs.com/package/ec-pem`);
      } };

    Object.defineProperties(router, { ec_id_sign: ec_pem_missing, ec_id_verify: ec_pem_missing });
  } else {
    const ec_signed_id = ec_id_sign('sha256', ec_pub_id).sign();
    if (!ec_signed_id_verify(ec_pub_id, ec_signed_id)) {
      throw new Error(`Asserted self-verify of ec_pub_id failed`);
    }

    Object.defineProperties(router, {
      ec_signed_id: { value: ec_signed_id },
      ec_id_sign: { value: ec_id_sign },
      ec_id_verify: { value: ec_id_verify } });
  }

  function ec_id_hmac(ec_pub_other, reverse) {
    const secret = __ec_priv_id__.computeSecret(ec_pub_other);
    return createHmac('sha256', secret).update(reverse ? ec_pub_other : ec_pub_id).digest();
  }

  function ec_id_sign(algorithm, ...args) {
    return ec_pem.sign(__ec_priv_id__, algorithm, ...args);
  }

  function ec_signed_id_verify(ec_pub_other, ec_signed_other) {
    const verify = ec_id_verify(ec_pub_other, 'sha256', ec_pub_other);
    return ec_signed_other ? verify.verify(ec_signed_other) : verify;
  }

  function ec_id_verify(ec_pub_other, algorithm, ...args) {
    // see ec-pem.verfiy and crypto.createVerfiy
    let ec = ec_pub_other;
    if (null == ec_pub_other.curve) {
      ec = Object.assign(createECDH(curve), { curve });
      if (ec_pub_other.getPublicKey) {
        ec.setPublicKey(ec_pub_other.getPublicKey());
      } else ec.setPublicKey(ec_pub_other);
    }

    return ec_pem.verify(ec, algorithm, ...args);
  }
}

export default ec_router_plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLXJvdXRlci1lYy5tanMiLCJzb3VyY2VzIjpbIi4uL2NvZGUvZWNfcm91dGVyLmpzeSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VSTH0gZnJvbSAndXJsJ1xuaW1wb3J0IHtjcmVhdGVFQ0RILCBjcmVhdGVIbWFjfSBmcm9tICdjcnlwdG8nXG5pbXBvcnQgY3JlYXRlUGFja2V0UGFyc2VyIGZyb20gJ21zZy1mYWJyaWMtcGFja2V0LXN0cmVhbSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWNfcm91dGVyX3BsdWdpbihwbHVnaW5fb3B0aW9ucz17fSkgOjpcbiAgcmV0dXJuIEA6IHN1YmNsYXNzXG5cbiAgZnVuY3Rpb24gc3ViY2xhc3MoTWVzc2FnZUh1Yl9QSSwgYmFzZXMpIDo6XG4gICAgT2JqZWN0LmFzc2lnbiBAIE1lc3NhZ2VIdWJfUEkucHJvdG90eXBlLCBAOlxuICAgICAgX2luaXRfcGFja2V0UGFyc2VyKCkgOjogcmV0dXJuIGNyZWF0ZVBhY2tldFBhcnNlcigpXG4gICAgICBfcGFyc2VDb25uZWN0VVJMKGNvbm5fdXJsKSA6OiByZXR1cm4gbmV3IFVSTChjb25uX3VybClcbiAgICAgIF9pbml0X3JvdXRlcigpIDo6IHJldHVybiBuZXcgRUNNZXNzYWdlUm91dGVyKClcblxuICAgIGNsYXNzIEVDTWVzc2FnZVJvdXRlciBleHRlbmRzIGJhc2VzLk1lc3NhZ2VSb3V0ZXIgOjpcbiAgICAgIGNvbnN0cnVjdG9yKCkgOjpcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBpbml0Um91dGVySWRlbnRpdHkodGhpcywgcGx1Z2luX29wdGlvbnMuZWNfY3VydmUsIHBsdWdpbl9vcHRpb25zLmVjX3BlbSlcbiAgICAgICAgdGhpcy5faW5pdERpc3BhdGNoKClcblxuXG5lY19yb3V0ZXJfcGx1Z2luLmluaXRSb3V0ZXJJZGVudGl0eSA9IGluaXRSb3V0ZXJJZGVudGl0eVxuZnVuY3Rpb24gaW5pdFJvdXRlcklkZW50aXR5KHJvdXRlciwgY3VydmUsIGVjX3BlbSkgOjpcbiAgLy8gQ3JlYXRlIGNsb3N1cmVzIG92ZXIgdGhlIFJvdXRlcidzIEVDIHByaXZhdGUgaWRlbnRpdHkgY3JlZGVudGlhbHNcbiAgdmFyIF9fZWNfcHJpdl9pZF9fLCBlY19wdWJfaWQsIGlkX3NlbGZcbiAgaWYgISBjdXJ2ZSA6OiBjdXJ2ZSA9ICdwcmltZTI1NnYxJ1xuICB3aGlsZSAhIGlkX3NlbGYgOjogLy8gZW5zdXJlIGlkX3NlbGYgIT09IDAgYnkgaGFwcGVuc3RhbmNlXG4gICAgX19lY19wcml2X2lkX18gPSBPYmplY3QuYXNzaWduIEAgY3JlYXRlRUNESChjdXJ2ZSksIEB7fSBjdXJ2ZVxuICAgIGVjX3B1Yl9pZCA9IF9fZWNfcHJpdl9pZF9fLmdlbmVyYXRlS2V5cyhudWxsLCAnY29tcHJlc3NlZCcpXG4gICAgaWRfc2VsZiA9IGVjX3B1Yl9pZC5yZWFkVUludDMyTEUoOCkgLy8gcmVhZCBpZCBmcm9tIG9mZnNldCA4IHRvIDEyXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgQCByb3V0ZXIsIEA6XG4gICAgaWRfc2VsZjogQDogdmFsdWU6IGlkX3NlbGZcbiAgICBlY19wdWJfaWQ6IEA6IHZhbHVlOiBlY19wdWJfaWRcbiAgICBlY19pZF9obWFjOiBAOiB2YWx1ZTogZWNfaWRfaG1hY1xuXG5cbiAgaWYgdW5kZWZpbmVkID09PSBlY19wZW0gOjpcbiAgICBjb25zdCBlY19wZW1fbWlzc2luZyA9IEA6IHZhbHVlKCkgOjpcbiAgICAgIHRocm93IG5ldyBFcnJvciBAIGBSZXF1aXJlcyBvcHRpb25hbCBbZWMtcGVtXVsxXSBkZXBlbmRlbmN5LlxcbiAgICBbMV06IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2VjLXBlbWBcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIEAgcm91dGVyLCBAOiBlY19pZF9zaWduOiBlY19wZW1fbWlzc2luZywgZWNfaWRfdmVyaWZ5OiBlY19wZW1fbWlzc2luZ1xuXG4gIGVsc2UgOjpcbiAgICBjb25zdCBlY19zaWduZWRfaWQgPSBlY19pZF9zaWduKCdzaGEyNTYnLCBlY19wdWJfaWQpLnNpZ24oKVxuICAgIGlmICEgZWNfc2lnbmVkX2lkX3ZlcmlmeShlY19wdWJfaWQsIGVjX3NpZ25lZF9pZCkgOjpcbiAgICAgIHRocm93IG5ldyBFcnJvciBAIGBBc3NlcnRlZCBzZWxmLXZlcmlmeSBvZiBlY19wdWJfaWQgZmFpbGVkYFxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgQCByb3V0ZXIsIEA6XG4gICAgICBlY19zaWduZWRfaWQ6IEA6IHZhbHVlOiBlY19zaWduZWRfaWRcbiAgICAgIGVjX2lkX3NpZ246IEA6IHZhbHVlOiBlY19pZF9zaWduXG4gICAgICBlY19pZF92ZXJpZnk6IEA6IHZhbHVlOiBlY19pZF92ZXJpZnlcblxuXG5cbiAgZnVuY3Rpb24gZWNfaWRfaG1hYyhlY19wdWJfb3RoZXIsIHJldmVyc2UpIDo6XG4gICAgY29uc3Qgc2VjcmV0ID0gX19lY19wcml2X2lkX18uY29tcHV0ZVNlY3JldChlY19wdWJfb3RoZXIpXG4gICAgcmV0dXJuIGNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldClcbiAgICAgIC51cGRhdGUgQCByZXZlcnNlID8gZWNfcHViX290aGVyIDogZWNfcHViX2lkXG4gICAgICAuZGlnZXN0KClcblxuICBmdW5jdGlvbiBlY19pZF9zaWduKGFsZ29yaXRobSwgLi4uYXJncykgOjpcbiAgICByZXR1cm4gZWNfcGVtLnNpZ24oX19lY19wcml2X2lkX18sIGFsZ29yaXRobSwgLi4uYXJncylcblxuICBmdW5jdGlvbiBlY19zaWduZWRfaWRfdmVyaWZ5KGVjX3B1Yl9vdGhlciwgZWNfc2lnbmVkX290aGVyKSA6OlxuICAgIGNvbnN0IHZlcmlmeSA9IGVjX2lkX3ZlcmlmeShlY19wdWJfb3RoZXIsICdzaGEyNTYnLCBlY19wdWJfb3RoZXIpXG4gICAgcmV0dXJuIGVjX3NpZ25lZF9vdGhlciA/IHZlcmlmeS52ZXJpZnkoZWNfc2lnbmVkX290aGVyKSA6IHZlcmlmeVxuXG4gIGZ1bmN0aW9uIGVjX2lkX3ZlcmlmeShlY19wdWJfb3RoZXIsIGFsZ29yaXRobSwgLi4uYXJncykgOjpcbiAgICAvLyBzZWUgZWMtcGVtLnZlcmZpeSBhbmQgY3J5cHRvLmNyZWF0ZVZlcmZpeVxuICAgIGxldCBlYyA9IGVjX3B1Yl9vdGhlclxuICAgIGlmIG51bGwgPT0gZWNfcHViX290aGVyLmN1cnZlIDo6XG4gICAgICBlYyA9IE9iamVjdC5hc3NpZ24gQCBjcmVhdGVFQ0RIKGN1cnZlKSwgQHt9IGN1cnZlXG4gICAgICBpZiBlY19wdWJfb3RoZXIuZ2V0UHVibGljS2V5IDo6XG4gICAgICAgIGVjLnNldFB1YmxpY0tleSBAIGVjX3B1Yl9vdGhlci5nZXRQdWJsaWNLZXkoKVxuICAgICAgZWxzZSBlYy5zZXRQdWJsaWNLZXkgQCBlY19wdWJfb3RoZXJcblxuICAgIHJldHVybiBlY19wZW0udmVyaWZ5KGVjLCBhbGdvcml0aG0sIC4uLmFyZ3MpXG5cbiJdLCJuYW1lcyI6WyJlY19yb3V0ZXJfcGx1Z2luIiwicGx1Z2luX29wdGlvbnMiLCJzdWJjbGFzcyIsIk1lc3NhZ2VIdWJfUEkiLCJiYXNlcyIsImFzc2lnbiIsInByb3RvdHlwZSIsImNyZWF0ZVBhY2tldFBhcnNlciIsImNvbm5fdXJsIiwiVVJMIiwiRUNNZXNzYWdlUm91dGVyIiwiTWVzc2FnZVJvdXRlciIsImVjX2N1cnZlIiwiZWNfcGVtIiwiX2luaXREaXNwYXRjaCIsImluaXRSb3V0ZXJJZGVudGl0eSIsInJvdXRlciIsImN1cnZlIiwiX19lY19wcml2X2lkX18iLCJlY19wdWJfaWQiLCJpZF9zZWxmIiwiT2JqZWN0IiwiY3JlYXRlRUNESCIsImdlbmVyYXRlS2V5cyIsInJlYWRVSW50MzJMRSIsImRlZmluZVByb3BlcnRpZXMiLCJ2YWx1ZSIsImVjX2lkX2htYWMiLCJ1bmRlZmluZWQiLCJlY19wZW1fbWlzc2luZyIsIkVycm9yIiwiZWNfaWRfc2lnbiIsImVjX2lkX3ZlcmlmeSIsImVjX3NpZ25lZF9pZCIsInNpZ24iLCJlY19zaWduZWRfaWRfdmVyaWZ5IiwiZWNfcHViX290aGVyIiwicmV2ZXJzZSIsInNlY3JldCIsImNvbXB1dGVTZWNyZXQiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0IiwiYWxnb3JpdGhtIiwiYXJncyIsImVjX3NpZ25lZF9vdGhlciIsInZlcmlmeSIsImVjIiwiZ2V0UHVibGljS2V5Iiwic2V0UHVibGljS2V5Il0sIm1hcHBpbmdzIjoiOzs7O0FBSWUsU0FBU0EsZ0JBQVQsQ0FBMEJDLGlCQUFlLEVBQXpDLEVBQTZDO1NBQ2pELEVBQUNDLFFBQUQsRUFBVDs7V0FFU0EsUUFBVCxDQUFrQkMsYUFBbEIsRUFBaUNDLEtBQWpDLEVBQXdDO1dBQy9CQyxNQUFQLENBQWdCRixjQUFjRyxTQUE5QixFQUEyQzsyQkFDcEI7ZUFBVUMsb0JBQVA7T0FEaUI7dUJBRXhCQyxRQUFqQixFQUEyQjtlQUFVLElBQUlDLEdBQUosQ0FBUUQsUUFBUixDQUFQO09BRlc7cUJBRzFCO2VBQVUsSUFBSUUsZUFBSixFQUFQO09BSHVCLEVBQTNDOztVQUtNQSxlQUFOLFNBQThCTixNQUFNTyxhQUFwQyxDQUFrRDtvQkFDbEM7OzJCQUVPLElBQW5CLEVBQXlCVixlQUFlVyxRQUF4QyxFQUFrRFgsZUFBZVksTUFBakU7YUFDS0MsYUFBTDs7Ozs7O0FBR1JkLGlCQUFpQmUsa0JBQWpCLEdBQXNDQSxrQkFBdEM7QUFDQSxTQUFTQSxrQkFBVCxDQUE0QkMsTUFBNUIsRUFBb0NDLEtBQXBDLEVBQTJDSixNQUEzQyxFQUFtRDs7TUFFN0NLLGNBQUosRUFBb0JDLFNBQXBCLEVBQStCQyxPQUEvQjtNQUNHLENBQUVILEtBQUwsRUFBYTtZQUFTLFlBQVI7O1NBQ1IsQ0FBRUcsT0FBUixFQUFrQjs7cUJBQ0NDLE9BQU9oQixNQUFQLENBQWdCaUIsV0FBV0wsS0FBWCxDQUFoQixFQUFtQyxFQUFJQSxLQUFKLEVBQW5DLENBQWpCO2dCQUNZQyxlQUFlSyxZQUFmLENBQTRCLElBQTVCLEVBQWtDLFlBQWxDLENBQVo7Y0FDVUosVUFBVUssWUFBVixDQUF1QixDQUF2QixDQUFWLENBSGdCO0dBS2xCSCxPQUFPSSxnQkFBUCxDQUEwQlQsTUFBMUIsRUFBb0M7YUFDdkIsRUFBQ1UsT0FBT04sT0FBUixFQUR1QjtlQUVyQixFQUFDTSxPQUFPUCxTQUFSLEVBRnFCO2dCQUdwQixFQUFDTyxPQUFPQyxVQUFSLEVBSG9CLEVBQXBDOztNQU1HQyxjQUFjZixNQUFqQixFQUEwQjtVQUNsQmdCLGlCQUFtQixFQUFDSCxRQUFRO2NBQzFCLElBQUlJLEtBQUosQ0FBYSwwRkFBYixDQUFOO09BRHVCLEVBQXpCOztXQUdPTCxnQkFBUCxDQUEwQlQsTUFBMUIsRUFBb0MsRUFBQ2UsWUFBWUYsY0FBYixFQUE2QkcsY0FBY0gsY0FBM0MsRUFBcEM7R0FKRixNQU1LO1VBQ0dJLGVBQWVGLFdBQVcsUUFBWCxFQUFxQlosU0FBckIsRUFBZ0NlLElBQWhDLEVBQXJCO1FBQ0csQ0FBRUMsb0JBQW9CaEIsU0FBcEIsRUFBK0JjLFlBQS9CLENBQUwsRUFBb0Q7WUFDNUMsSUFBSUgsS0FBSixDQUFhLDBDQUFiLENBQU47OztXQUVLTCxnQkFBUCxDQUEwQlQsTUFBMUIsRUFBb0M7b0JBQ2xCLEVBQUNVLE9BQU9PLFlBQVIsRUFEa0I7a0JBRXBCLEVBQUNQLE9BQU9LLFVBQVIsRUFGb0I7b0JBR2xCLEVBQUNMLE9BQU9NLFlBQVIsRUFIa0IsRUFBcEM7OztXQU9PTCxVQUFULENBQW9CUyxZQUFwQixFQUFrQ0MsT0FBbEMsRUFBMkM7VUFDbkNDLFNBQVNwQixlQUFlcUIsYUFBZixDQUE2QkgsWUFBN0IsQ0FBZjtXQUNPSSxXQUFXLFFBQVgsRUFBcUJGLE1BQXJCLEVBQ0pHLE1BREksQ0FDS0osVUFBVUQsWUFBVixHQUF5QmpCLFNBRDlCLEVBRUp1QixNQUZJLEVBQVA7OztXQUlPWCxVQUFULENBQW9CWSxTQUFwQixFQUErQixHQUFHQyxJQUFsQyxFQUF3QztXQUMvQi9CLE9BQU9xQixJQUFQLENBQVloQixjQUFaLEVBQTRCeUIsU0FBNUIsRUFBdUMsR0FBR0MsSUFBMUMsQ0FBUDs7O1dBRU9ULG1CQUFULENBQTZCQyxZQUE3QixFQUEyQ1MsZUFBM0MsRUFBNEQ7VUFDcERDLFNBQVNkLGFBQWFJLFlBQWIsRUFBMkIsUUFBM0IsRUFBcUNBLFlBQXJDLENBQWY7V0FDT1Msa0JBQWtCQyxPQUFPQSxNQUFQLENBQWNELGVBQWQsQ0FBbEIsR0FBbURDLE1BQTFEOzs7V0FFT2QsWUFBVCxDQUFzQkksWUFBdEIsRUFBb0NPLFNBQXBDLEVBQStDLEdBQUdDLElBQWxELEVBQXdEOztRQUVsREcsS0FBS1gsWUFBVDtRQUNHLFFBQVFBLGFBQWFuQixLQUF4QixFQUFnQztXQUN6QkksT0FBT2hCLE1BQVAsQ0FBZ0JpQixXQUFXTCxLQUFYLENBQWhCLEVBQW1DLEVBQUlBLEtBQUosRUFBbkMsQ0FBTDtVQUNHbUIsYUFBYVksWUFBaEIsRUFBK0I7V0FDMUJDLFlBQUgsQ0FBa0JiLGFBQWFZLFlBQWIsRUFBbEI7T0FERixNQUVLRCxHQUFHRSxZQUFILENBQWtCYixZQUFsQjs7O1dBRUF2QixPQUFPaUMsTUFBUCxDQUFjQyxFQUFkLEVBQWtCSixTQUFsQixFQUE2QixHQUFHQyxJQUFoQyxDQUFQOzs7Ozs7In0=
