import { URL } from 'url';
import { createECDH, createHmac } from 'crypto';
import createPacketParser from 'msg-fabric-packet-stream';

function ec_router_plugin(plugin_options = {}) {
  return { subclass };

  function subclass(FabricHub_PI, bases) {
    Object.assign(FabricHub_PI.prototype, {
      packetParser: createPacketParser(plugin_options),
      _parseConnectURL(conn_url) {
        return new URL(conn_url);
      },
      _init_router() {
        return new ECRouter();
      } });

    class ECRouter extends bases.Router {
      constructor() {
        super();
        initRouterIdentity(this, plugin_options.ec_curve, plugin_options.ec_pem);
      }
    }
  }
}

ec_router_plugin.initRouterIdentity = initRouterIdentity;
function initRouterIdentity(router, curve, ec_pem) {
  // Create closures over the Router's EC private identity credentials
  var __ec_priv_id__, ec_pub_id, id_self;
  if (!curve) {
    curve = 'prime256v1';
  }
  while (!id_self) {
    // ensure id_self !== 0 by happenstance
    __ec_priv_id__ = Object.assign(createECDH(curve), { curve });
    ec_pub_id = __ec_priv_id__.generateKeys(null, 'compressed');
    id_self = ec_pub_id.readUInt32LE(8); // read id from offset 8 to 12
  }Object.defineProperties(router, {
    id_self: { value: id_self },
    ec_pub_id: { value: ec_pub_id },
    ec_id_hmac: { value: ec_id_hmac } });

  if (undefined === ec_pem) {
    const ec_pem_missing = { value() {
        throw new Error(`Requires optional [ec-pem][1] dependency.\n    [1]: https://www.npmjs.com/package/ec-pem`);
      } };

    Object.defineProperties(router, { ec_id_sign: ec_pem_missing, ec_id_verify: ec_pem_missing });
  } else {
    const ec_signed_id = ec_id_sign('sha256', ec_pub_id).sign();
    if (!ec_signed_id_verify(ec_pub_id, ec_signed_id)) {
      throw new Error(`Asserted self-verify of ec_pub_id failed`);
    }

    Object.defineProperties(router, {
      ec_signed_id: { value: ec_signed_id },
      ec_id_sign: { value: ec_id_sign },
      ec_id_verify: { value: ec_id_verify } });
  }

  function ec_id_hmac(ec_pub_other, reverse) {
    const secret = __ec_priv_id__.computeSecret(ec_pub_other);
    return createHmac('sha256', secret).update(reverse ? ec_pub_other : ec_pub_id).digest();
  }

  function ec_id_sign(algorithm, ...args) {
    return ec_pem.sign(__ec_priv_id__, algorithm, ...args);
  }

  function ec_signed_id_verify(ec_pub_other, ec_signed_other) {
    const verify = ec_id_verify(ec_pub_other, 'sha256', ec_pub_other);
    return ec_signed_other ? verify.verify(ec_signed_other) : verify;
  }

  function ec_id_verify(ec_pub_other, algorithm, ...args) {
    // see ec-pem.verfiy and crypto.createVerfiy
    let ec = ec_pub_other;
    if (null == ec_pub_other.curve) {
      ec = Object.assign(createECDH(curve), { curve });
      if (ec_pub_other.getPublicKey) {
        ec.setPublicKey(ec_pub_other.getPublicKey());
      } else ec.setPublicKey(ec_pub_other);
    }

    return ec_pem.verify(ec, algorithm, ...args);
  }
}

export default ec_router_plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLXJvdXRlci1lYy5tanMiLCJzb3VyY2VzIjpbIi4uL2NvZGUvZWNfcm91dGVyLmpzeSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VSTH0gZnJvbSAndXJsJ1xuaW1wb3J0IHtjcmVhdGVFQ0RILCBjcmVhdGVIbWFjfSBmcm9tICdjcnlwdG8nXG5pbXBvcnQgY3JlYXRlUGFja2V0UGFyc2VyIGZyb20gJ21zZy1mYWJyaWMtcGFja2V0LXN0cmVhbSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWNfcm91dGVyX3BsdWdpbihwbHVnaW5fb3B0aW9ucz17fSkgOjpcbiAgcmV0dXJuIEA6IHN1YmNsYXNzXG5cbiAgZnVuY3Rpb24gc3ViY2xhc3MoRmFicmljSHViX1BJLCBiYXNlcykgOjpcbiAgICBPYmplY3QuYXNzaWduIEAgRmFicmljSHViX1BJLnByb3RvdHlwZSwgQDpcbiAgICAgIHBhY2tldFBhcnNlcjogY3JlYXRlUGFja2V0UGFyc2VyIEAgcGx1Z2luX29wdGlvbnNcbiAgICAgIF9wYXJzZUNvbm5lY3RVUkwoY29ubl91cmwpIDo6IHJldHVybiBuZXcgVVJMKGNvbm5fdXJsKVxuICAgICAgX2luaXRfcm91dGVyKCkgOjogcmV0dXJuIG5ldyBFQ1JvdXRlcigpXG5cbiAgICBjbGFzcyBFQ1JvdXRlciBleHRlbmRzIGJhc2VzLlJvdXRlciA6OlxuICAgICAgY29uc3RydWN0b3IoKSA6OlxuICAgICAgICBzdXBlcigpXG4gICAgICAgIGluaXRSb3V0ZXJJZGVudGl0eSh0aGlzLCBwbHVnaW5fb3B0aW9ucy5lY19jdXJ2ZSwgcGx1Z2luX29wdGlvbnMuZWNfcGVtKVxuXG5cbmVjX3JvdXRlcl9wbHVnaW4uaW5pdFJvdXRlcklkZW50aXR5ID0gaW5pdFJvdXRlcklkZW50aXR5XG5mdW5jdGlvbiBpbml0Um91dGVySWRlbnRpdHkocm91dGVyLCBjdXJ2ZSwgZWNfcGVtKSA6OlxuICAvLyBDcmVhdGUgY2xvc3VyZXMgb3ZlciB0aGUgUm91dGVyJ3MgRUMgcHJpdmF0ZSBpZGVudGl0eSBjcmVkZW50aWFsc1xuICB2YXIgX19lY19wcml2X2lkX18sIGVjX3B1Yl9pZCwgaWRfc2VsZlxuICBpZiAhIGN1cnZlIDo6IGN1cnZlID0gJ3ByaW1lMjU2djEnXG4gIHdoaWxlICEgaWRfc2VsZiA6OiAvLyBlbnN1cmUgaWRfc2VsZiAhPT0gMCBieSBoYXBwZW5zdGFuY2VcbiAgICBfX2VjX3ByaXZfaWRfXyA9IE9iamVjdC5hc3NpZ24gQCBjcmVhdGVFQ0RIKGN1cnZlKSwgQHt9IGN1cnZlXG4gICAgZWNfcHViX2lkID0gX19lY19wcml2X2lkX18uZ2VuZXJhdGVLZXlzKG51bGwsICdjb21wcmVzc2VkJylcbiAgICBpZF9zZWxmID0gZWNfcHViX2lkLnJlYWRVSW50MzJMRSg4KSAvLyByZWFkIGlkIGZyb20gb2Zmc2V0IDggdG8gMTJcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyBAIHJvdXRlciwgQDpcbiAgICBpZF9zZWxmOiBAOiB2YWx1ZTogaWRfc2VsZlxuICAgIGVjX3B1Yl9pZDogQDogdmFsdWU6IGVjX3B1Yl9pZFxuICAgIGVjX2lkX2htYWM6IEA6IHZhbHVlOiBlY19pZF9obWFjXG5cblxuICBpZiB1bmRlZmluZWQgPT09IGVjX3BlbSA6OlxuICAgIGNvbnN0IGVjX3BlbV9taXNzaW5nID0gQDogdmFsdWUoKSA6OlxuICAgICAgdGhyb3cgbmV3IEVycm9yIEAgYFJlcXVpcmVzIG9wdGlvbmFsIFtlYy1wZW1dWzFdIGRlcGVuZGVuY3kuXFxuICAgIFsxXTogaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWMtcGVtYFxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgQCByb3V0ZXIsIEA6IGVjX2lkX3NpZ246IGVjX3BlbV9taXNzaW5nLCBlY19pZF92ZXJpZnk6IGVjX3BlbV9taXNzaW5nXG5cbiAgZWxzZSA6OlxuICAgIGNvbnN0IGVjX3NpZ25lZF9pZCA9IGVjX2lkX3NpZ24oJ3NoYTI1NicsIGVjX3B1Yl9pZCkuc2lnbigpXG4gICAgaWYgISBlY19zaWduZWRfaWRfdmVyaWZ5KGVjX3B1Yl9pZCwgZWNfc2lnbmVkX2lkKSA6OlxuICAgICAgdGhyb3cgbmV3IEVycm9yIEAgYEFzc2VydGVkIHNlbGYtdmVyaWZ5IG9mIGVjX3B1Yl9pZCBmYWlsZWRgXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyBAIHJvdXRlciwgQDpcbiAgICAgIGVjX3NpZ25lZF9pZDogQDogdmFsdWU6IGVjX3NpZ25lZF9pZFxuICAgICAgZWNfaWRfc2lnbjogQDogdmFsdWU6IGVjX2lkX3NpZ25cbiAgICAgIGVjX2lkX3ZlcmlmeTogQDogdmFsdWU6IGVjX2lkX3ZlcmlmeVxuXG5cblxuICBmdW5jdGlvbiBlY19pZF9obWFjKGVjX3B1Yl9vdGhlciwgcmV2ZXJzZSkgOjpcbiAgICBjb25zdCBzZWNyZXQgPSBfX2VjX3ByaXZfaWRfXy5jb21wdXRlU2VjcmV0KGVjX3B1Yl9vdGhlcilcbiAgICByZXR1cm4gY3JlYXRlSG1hYygnc2hhMjU2Jywgc2VjcmV0KVxuICAgICAgLnVwZGF0ZSBAIHJldmVyc2UgPyBlY19wdWJfb3RoZXIgOiBlY19wdWJfaWRcbiAgICAgIC5kaWdlc3QoKVxuXG4gIGZ1bmN0aW9uIGVjX2lkX3NpZ24oYWxnb3JpdGhtLCAuLi5hcmdzKSA6OlxuICAgIHJldHVybiBlY19wZW0uc2lnbihfX2VjX3ByaXZfaWRfXywgYWxnb3JpdGhtLCAuLi5hcmdzKVxuXG4gIGZ1bmN0aW9uIGVjX3NpZ25lZF9pZF92ZXJpZnkoZWNfcHViX290aGVyLCBlY19zaWduZWRfb3RoZXIpIDo6XG4gICAgY29uc3QgdmVyaWZ5ID0gZWNfaWRfdmVyaWZ5KGVjX3B1Yl9vdGhlciwgJ3NoYTI1NicsIGVjX3B1Yl9vdGhlcilcbiAgICByZXR1cm4gZWNfc2lnbmVkX290aGVyID8gdmVyaWZ5LnZlcmlmeShlY19zaWduZWRfb3RoZXIpIDogdmVyaWZ5XG5cbiAgZnVuY3Rpb24gZWNfaWRfdmVyaWZ5KGVjX3B1Yl9vdGhlciwgYWxnb3JpdGhtLCAuLi5hcmdzKSA6OlxuICAgIC8vIHNlZSBlYy1wZW0udmVyZml5IGFuZCBjcnlwdG8uY3JlYXRlVmVyZml5XG4gICAgbGV0IGVjID0gZWNfcHViX290aGVyXG4gICAgaWYgbnVsbCA9PSBlY19wdWJfb3RoZXIuY3VydmUgOjpcbiAgICAgIGVjID0gT2JqZWN0LmFzc2lnbiBAIGNyZWF0ZUVDREgoY3VydmUpLCBAe30gY3VydmVcbiAgICAgIGlmIGVjX3B1Yl9vdGhlci5nZXRQdWJsaWNLZXkgOjpcbiAgICAgICAgZWMuc2V0UHVibGljS2V5IEAgZWNfcHViX290aGVyLmdldFB1YmxpY0tleSgpXG4gICAgICBlbHNlIGVjLnNldFB1YmxpY0tleSBAIGVjX3B1Yl9vdGhlclxuXG4gICAgcmV0dXJuIGVjX3BlbS52ZXJpZnkoZWMsIGFsZ29yaXRobSwgLi4uYXJncylcblxuIl0sIm5hbWVzIjpbImVjX3JvdXRlcl9wbHVnaW4iLCJwbHVnaW5fb3B0aW9ucyIsInN1YmNsYXNzIiwiRmFicmljSHViX1BJIiwiYmFzZXMiLCJhc3NpZ24iLCJwcm90b3R5cGUiLCJjcmVhdGVQYWNrZXRQYXJzZXIiLCJjb25uX3VybCIsIlVSTCIsIkVDUm91dGVyIiwiUm91dGVyIiwiZWNfY3VydmUiLCJlY19wZW0iLCJpbml0Um91dGVySWRlbnRpdHkiLCJyb3V0ZXIiLCJjdXJ2ZSIsIl9fZWNfcHJpdl9pZF9fIiwiZWNfcHViX2lkIiwiaWRfc2VsZiIsIk9iamVjdCIsImNyZWF0ZUVDREgiLCJnZW5lcmF0ZUtleXMiLCJyZWFkVUludDMyTEUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidmFsdWUiLCJlY19pZF9obWFjIiwidW5kZWZpbmVkIiwiZWNfcGVtX21pc3NpbmciLCJFcnJvciIsImVjX2lkX3NpZ24iLCJlY19pZF92ZXJpZnkiLCJlY19zaWduZWRfaWQiLCJzaWduIiwiZWNfc2lnbmVkX2lkX3ZlcmlmeSIsImVjX3B1Yl9vdGhlciIsInJldmVyc2UiLCJzZWNyZXQiLCJjb21wdXRlU2VjcmV0IiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsImFsZ29yaXRobSIsImFyZ3MiLCJlY19zaWduZWRfb3RoZXIiLCJ2ZXJpZnkiLCJlYyIsImdldFB1YmxpY0tleSIsInNldFB1YmxpY0tleSJdLCJtYXBwaW5ncyI6Ijs7OztBQUllLFNBQVNBLGdCQUFULENBQTBCQyxpQkFBZSxFQUF6QyxFQUE2QztTQUNqRCxFQUFDQyxRQUFELEVBQVQ7O1dBRVNBLFFBQVQsQ0FBa0JDLFlBQWxCLEVBQWdDQyxLQUFoQyxFQUF1QztXQUM5QkMsTUFBUCxDQUFnQkYsYUFBYUcsU0FBN0IsRUFBMEM7b0JBQzFCQyxtQkFBcUJOLGNBQXJCLENBRDBCO3VCQUV2Qk8sUUFBakIsRUFBMkI7ZUFBVSxJQUFJQyxHQUFKLENBQVFELFFBQVIsQ0FBUDtPQUZVO3FCQUd6QjtlQUFVLElBQUlFLFFBQUosRUFBUDtPQUhzQixFQUExQzs7VUFLTUEsUUFBTixTQUF1Qk4sTUFBTU8sTUFBN0IsQ0FBb0M7b0JBQ3BCOzsyQkFFTyxJQUFuQixFQUF5QlYsZUFBZVcsUUFBeEMsRUFBa0RYLGVBQWVZLE1BQWpFOzs7Ozs7QUFHUmIsaUJBQWlCYyxrQkFBakIsR0FBc0NBLGtCQUF0QztBQUNBLFNBQVNBLGtCQUFULENBQTRCQyxNQUE1QixFQUFvQ0MsS0FBcEMsRUFBMkNILE1BQTNDLEVBQW1EOztNQUU3Q0ksY0FBSixFQUFvQkMsU0FBcEIsRUFBK0JDLE9BQS9CO01BQ0csQ0FBRUgsS0FBTCxFQUFhO1lBQVMsWUFBUjs7U0FDUixDQUFFRyxPQUFSLEVBQWtCOztxQkFDQ0MsT0FBT2YsTUFBUCxDQUFnQmdCLFdBQVdMLEtBQVgsQ0FBaEIsRUFBbUMsRUFBSUEsS0FBSixFQUFuQyxDQUFqQjtnQkFDWUMsZUFBZUssWUFBZixDQUE0QixJQUE1QixFQUFrQyxZQUFsQyxDQUFaO2NBQ1VKLFVBQVVLLFlBQVYsQ0FBdUIsQ0FBdkIsQ0FBVixDQUhnQjtHQUtsQkgsT0FBT0ksZ0JBQVAsQ0FBMEJULE1BQTFCLEVBQW9DO2FBQ3ZCLEVBQUNVLE9BQU9OLE9BQVIsRUFEdUI7ZUFFckIsRUFBQ00sT0FBT1AsU0FBUixFQUZxQjtnQkFHcEIsRUFBQ08sT0FBT0MsVUFBUixFQUhvQixFQUFwQzs7TUFNR0MsY0FBY2QsTUFBakIsRUFBMEI7VUFDbEJlLGlCQUFtQixFQUFDSCxRQUFRO2NBQzFCLElBQUlJLEtBQUosQ0FBYSwwRkFBYixDQUFOO09BRHVCLEVBQXpCOztXQUdPTCxnQkFBUCxDQUEwQlQsTUFBMUIsRUFBb0MsRUFBQ2UsWUFBWUYsY0FBYixFQUE2QkcsY0FBY0gsY0FBM0MsRUFBcEM7R0FKRixNQU1LO1VBQ0dJLGVBQWVGLFdBQVcsUUFBWCxFQUFxQlosU0FBckIsRUFBZ0NlLElBQWhDLEVBQXJCO1FBQ0csQ0FBRUMsb0JBQW9CaEIsU0FBcEIsRUFBK0JjLFlBQS9CLENBQUwsRUFBb0Q7WUFDNUMsSUFBSUgsS0FBSixDQUFhLDBDQUFiLENBQU47OztXQUVLTCxnQkFBUCxDQUEwQlQsTUFBMUIsRUFBb0M7b0JBQ2xCLEVBQUNVLE9BQU9PLFlBQVIsRUFEa0I7a0JBRXBCLEVBQUNQLE9BQU9LLFVBQVIsRUFGb0I7b0JBR2xCLEVBQUNMLE9BQU9NLFlBQVIsRUFIa0IsRUFBcEM7OztXQU9PTCxVQUFULENBQW9CUyxZQUFwQixFQUFrQ0MsT0FBbEMsRUFBMkM7VUFDbkNDLFNBQVNwQixlQUFlcUIsYUFBZixDQUE2QkgsWUFBN0IsQ0FBZjtXQUNPSSxXQUFXLFFBQVgsRUFBcUJGLE1BQXJCLEVBQ0pHLE1BREksQ0FDS0osVUFBVUQsWUFBVixHQUF5QmpCLFNBRDlCLEVBRUp1QixNQUZJLEVBQVA7OztXQUlPWCxVQUFULENBQW9CWSxTQUFwQixFQUErQixHQUFHQyxJQUFsQyxFQUF3QztXQUMvQjlCLE9BQU9vQixJQUFQLENBQVloQixjQUFaLEVBQTRCeUIsU0FBNUIsRUFBdUMsR0FBR0MsSUFBMUMsQ0FBUDs7O1dBRU9ULG1CQUFULENBQTZCQyxZQUE3QixFQUEyQ1MsZUFBM0MsRUFBNEQ7VUFDcERDLFNBQVNkLGFBQWFJLFlBQWIsRUFBMkIsUUFBM0IsRUFBcUNBLFlBQXJDLENBQWY7V0FDT1Msa0JBQWtCQyxPQUFPQSxNQUFQLENBQWNELGVBQWQsQ0FBbEIsR0FBbURDLE1BQTFEOzs7V0FFT2QsWUFBVCxDQUFzQkksWUFBdEIsRUFBb0NPLFNBQXBDLEVBQStDLEdBQUdDLElBQWxELEVBQXdEOztRQUVsREcsS0FBS1gsWUFBVDtRQUNHLFFBQVFBLGFBQWFuQixLQUF4QixFQUFnQztXQUN6QkksT0FBT2YsTUFBUCxDQUFnQmdCLFdBQVdMLEtBQVgsQ0FBaEIsRUFBbUMsRUFBSUEsS0FBSixFQUFuQyxDQUFMO1VBQ0dtQixhQUFhWSxZQUFoQixFQUErQjtXQUMxQkMsWUFBSCxDQUFrQmIsYUFBYVksWUFBYixFQUFsQjtPQURGLE1BRUtELEdBQUdFLFlBQUgsQ0FBa0JiLFlBQWxCOzs7V0FFQXRCLE9BQU9nQyxNQUFQLENBQWNDLEVBQWQsRUFBa0JKLFNBQWxCLEVBQTZCLEdBQUdDLElBQWhDLENBQVA7Ozs7OzsifQ==
